// Generated by gencpp from file path_follower/Time.msg
// DO NOT EDIT!


#ifndef PATH_FOLLOWER_MESSAGE_TIME_H
#define PATH_FOLLOWER_MESSAGE_TIME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_follower
{
template <class ContainerAllocator>
struct Time_
{
  typedef Time_<ContainerAllocator> Type;

  Time_()
    : t_start(0.0)
    , t_end(0.0)
    , mpc_start(0.0)
    , t1(0.0)
    , t2(0.0)
    , t3(0.0)
    , t4(0.0)
    , t5(0.0)
    , t6(0.0)
    , t7(0.0)
    , t8(0.0)
    , t9(0.0)
    , solver_start(0.0)
    , solver_end(0.0)
    , mpc_end(0.0)  {
    }
  Time_(const ContainerAllocator& _alloc)
    : t_start(0.0)
    , t_end(0.0)
    , mpc_start(0.0)
    , t1(0.0)
    , t2(0.0)
    , t3(0.0)
    , t4(0.0)
    , t5(0.0)
    , t6(0.0)
    , t7(0.0)
    , t8(0.0)
    , t9(0.0)
    , solver_start(0.0)
    , solver_end(0.0)
    , mpc_end(0.0)  {
  (void)_alloc;
    }



   typedef double _t_start_type;
  _t_start_type t_start;

   typedef double _t_end_type;
  _t_end_type t_end;

   typedef double _mpc_start_type;
  _mpc_start_type mpc_start;

   typedef double _t1_type;
  _t1_type t1;

   typedef double _t2_type;
  _t2_type t2;

   typedef double _t3_type;
  _t3_type t3;

   typedef double _t4_type;
  _t4_type t4;

   typedef double _t5_type;
  _t5_type t5;

   typedef double _t6_type;
  _t6_type t6;

   typedef double _t7_type;
  _t7_type t7;

   typedef double _t8_type;
  _t8_type t8;

   typedef double _t9_type;
  _t9_type t9;

   typedef double _solver_start_type;
  _solver_start_type solver_start;

   typedef double _solver_end_type;
  _solver_end_type solver_end;

   typedef double _mpc_end_type;
  _mpc_end_type mpc_end;





  typedef boost::shared_ptr< ::path_follower::Time_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_follower::Time_<ContainerAllocator> const> ConstPtr;

}; // struct Time_

typedef ::path_follower::Time_<std::allocator<void> > Time;

typedef boost::shared_ptr< ::path_follower::Time > TimePtr;
typedef boost::shared_ptr< ::path_follower::Time const> TimeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_follower::Time_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_follower::Time_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_follower

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'path_follower': ['/data/yang/code/aws/catkin_ws_docker/src/path_follower/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_follower::Time_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_follower::Time_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_follower::Time_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_follower::Time_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_follower::Time_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_follower::Time_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_follower::Time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f100a1b959faa915aef817b8b8f13a8";
  }

  static const char* value(const ::path_follower::Time_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f100a1b959faa91ULL;
  static const uint64_t static_value2 = 0x5aef817b8b8f13a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_follower::Time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_follower/Time";
  }

  static const char* value(const ::path_follower::Time_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_follower::Time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 t_start\n\
float64 t_end\n\
float64 mpc_start\n\
float64 t1\n\
float64 t2\n\
float64 t3\n\
float64 t4\n\
float64 t5\n\
float64 t6\n\
float64 t7\n\
float64 t8\n\
float64 t9\n\
float64 solver_start\n\
float64 solver_end\n\
float64 mpc_end\n\
\n\
\n\
";
  }

  static const char* value(const ::path_follower::Time_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_follower::Time_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.t_start);
      stream.next(m.t_end);
      stream.next(m.mpc_start);
      stream.next(m.t1);
      stream.next(m.t2);
      stream.next(m.t3);
      stream.next(m.t4);
      stream.next(m.t5);
      stream.next(m.t6);
      stream.next(m.t7);
      stream.next(m.t8);
      stream.next(m.t9);
      stream.next(m.solver_start);
      stream.next(m.solver_end);
      stream.next(m.mpc_end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Time_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_follower::Time_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_follower::Time_<ContainerAllocator>& v)
  {
    s << indent << "t_start: ";
    Printer<double>::stream(s, indent + "  ", v.t_start);
    s << indent << "t_end: ";
    Printer<double>::stream(s, indent + "  ", v.t_end);
    s << indent << "mpc_start: ";
    Printer<double>::stream(s, indent + "  ", v.mpc_start);
    s << indent << "t1: ";
    Printer<double>::stream(s, indent + "  ", v.t1);
    s << indent << "t2: ";
    Printer<double>::stream(s, indent + "  ", v.t2);
    s << indent << "t3: ";
    Printer<double>::stream(s, indent + "  ", v.t3);
    s << indent << "t4: ";
    Printer<double>::stream(s, indent + "  ", v.t4);
    s << indent << "t5: ";
    Printer<double>::stream(s, indent + "  ", v.t5);
    s << indent << "t6: ";
    Printer<double>::stream(s, indent + "  ", v.t6);
    s << indent << "t7: ";
    Printer<double>::stream(s, indent + "  ", v.t7);
    s << indent << "t8: ";
    Printer<double>::stream(s, indent + "  ", v.t8);
    s << indent << "t9: ";
    Printer<double>::stream(s, indent + "  ", v.t9);
    s << indent << "solver_start: ";
    Printer<double>::stream(s, indent + "  ", v.solver_start);
    s << indent << "solver_end: ";
    Printer<double>::stream(s, indent + "  ", v.solver_end);
    s << indent << "mpc_end: ";
    Printer<double>::stream(s, indent + "  ", v.mpc_end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_FOLLOWER_MESSAGE_TIME_H
