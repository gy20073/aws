// Generated by gencpp from file path_follower/ApplanixPose.msg
// DO NOT EDIT!


#ifndef PATH_FOLLOWER_MESSAGE_APPLANIXPOSE_H
#define PATH_FOLLOWER_MESSAGE_APPLANIXPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace path_follower
{
template <class ContainerAllocator>
struct ApplanixPose_
{
  typedef ApplanixPose_<ContainerAllocator> Type;

  ApplanixPose_()
    : header()
    , timestamp(0.0)
    , smooth_x(0.0)
    , smooth_y(0.0)
    , smooth_z(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , vel_north(0.0)
    , vel_east(0.0)
    , vel_up(0.0)
    , speed(0.0)
    , track(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , rate_roll(0.0)
    , rate_pitch(0.0)
    , rate_yaw(0.0)
    , accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)
    , wander(0.0)
    , id(0)
    , postprocess_code(0)
    , hardware_timestamp(0.0)
    , hardware_time_mode(0)  {
    }
  ApplanixPose_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , timestamp(0.0)
    , smooth_x(0.0)
    , smooth_y(0.0)
    , smooth_z(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , vel_north(0.0)
    , vel_east(0.0)
    , vel_up(0.0)
    , speed(0.0)
    , track(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , rate_roll(0.0)
    , rate_pitch(0.0)
    , rate_yaw(0.0)
    , accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)
    , wander(0.0)
    , id(0)
    , postprocess_code(0)
    , hardware_timestamp(0.0)
    , hardware_time_mode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef double _smooth_x_type;
  _smooth_x_type smooth_x;

   typedef double _smooth_y_type;
  _smooth_y_type smooth_y;

   typedef double _smooth_z_type;
  _smooth_z_type smooth_z;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef float _vel_north_type;
  _vel_north_type vel_north;

   typedef float _vel_east_type;
  _vel_east_type vel_east;

   typedef float _vel_up_type;
  _vel_up_type vel_up;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _track_type;
  _track_type track;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _rate_roll_type;
  _rate_roll_type rate_roll;

   typedef double _rate_pitch_type;
  _rate_pitch_type rate_pitch;

   typedef double _rate_yaw_type;
  _rate_yaw_type rate_yaw;

   typedef double _accel_x_type;
  _accel_x_type accel_x;

   typedef double _accel_y_type;
  _accel_y_type accel_y;

   typedef double _accel_z_type;
  _accel_z_type accel_z;

   typedef double _wander_type;
  _wander_type wander;

   typedef uint32_t _id_type;
  _id_type id;

   typedef int32_t _postprocess_code_type;
  _postprocess_code_type postprocess_code;

   typedef double _hardware_timestamp_type;
  _hardware_timestamp_type hardware_timestamp;

   typedef int32_t _hardware_time_mode_type;
  _hardware_time_mode_type hardware_time_mode;





  typedef boost::shared_ptr< ::path_follower::ApplanixPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_follower::ApplanixPose_<ContainerAllocator> const> ConstPtr;

}; // struct ApplanixPose_

typedef ::path_follower::ApplanixPose_<std::allocator<void> > ApplanixPose;

typedef boost::shared_ptr< ::path_follower::ApplanixPose > ApplanixPosePtr;
typedef boost::shared_ptr< ::path_follower::ApplanixPose const> ApplanixPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_follower::ApplanixPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_follower::ApplanixPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_follower

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'path_follower': ['/data/yang/code/aws/catkin_ws_docker/src/path_follower/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_follower::ApplanixPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_follower::ApplanixPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_follower::ApplanixPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_follower::ApplanixPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_follower::ApplanixPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_follower::ApplanixPose_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_follower::ApplanixPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc005b38b12f428cb31db2f4286c261b";
  }

  static const char* value(const ::path_follower::ApplanixPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc005b38b12f428cULL;
  static const uint64_t static_value2 = 0xb31db2f4286c261bULL;
};

template<class ContainerAllocator>
struct DataType< ::path_follower::ApplanixPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_follower/ApplanixPose";
  }

  static const char* value(const ::path_follower::ApplanixPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_follower::ApplanixPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 timestamp\n\
float64 smooth_x\n\
float64 smooth_y\n\
float64 smooth_z\n\
float64 latitude\n\
float64 longitude\n\
float64 altitude\n\
float32 vel_north\n\
float32 vel_east\n\
float32 vel_up\n\
float32 speed\n\
float32 track\n\
float64 roll\n\
float64 pitch\n\
float64 yaw\n\
float64 rate_roll\n\
float64 rate_pitch\n\
float64 rate_yaw\n\
float64 accel_x\n\
float64 accel_y\n\
float64 accel_z\n\
float64 wander\n\
uint32  id\n\
int32   postprocess_code\n\
float64 hardware_timestamp\n\
int32   hardware_time_mode\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::path_follower::ApplanixPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_follower::ApplanixPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.timestamp);
      stream.next(m.smooth_x);
      stream.next(m.smooth_y);
      stream.next(m.smooth_z);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.vel_north);
      stream.next(m.vel_east);
      stream.next(m.vel_up);
      stream.next(m.speed);
      stream.next(m.track);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.rate_roll);
      stream.next(m.rate_pitch);
      stream.next(m.rate_yaw);
      stream.next(m.accel_x);
      stream.next(m.accel_y);
      stream.next(m.accel_z);
      stream.next(m.wander);
      stream.next(m.id);
      stream.next(m.postprocess_code);
      stream.next(m.hardware_timestamp);
      stream.next(m.hardware_time_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ApplanixPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_follower::ApplanixPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_follower::ApplanixPose_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "smooth_x: ";
    Printer<double>::stream(s, indent + "  ", v.smooth_x);
    s << indent << "smooth_y: ";
    Printer<double>::stream(s, indent + "  ", v.smooth_y);
    s << indent << "smooth_z: ";
    Printer<double>::stream(s, indent + "  ", v.smooth_z);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "vel_north: ";
    Printer<float>::stream(s, indent + "  ", v.vel_north);
    s << indent << "vel_east: ";
    Printer<float>::stream(s, indent + "  ", v.vel_east);
    s << indent << "vel_up: ";
    Printer<float>::stream(s, indent + "  ", v.vel_up);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "track: ";
    Printer<float>::stream(s, indent + "  ", v.track);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "rate_roll: ";
    Printer<double>::stream(s, indent + "  ", v.rate_roll);
    s << indent << "rate_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.rate_pitch);
    s << indent << "rate_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.rate_yaw);
    s << indent << "accel_x: ";
    Printer<double>::stream(s, indent + "  ", v.accel_x);
    s << indent << "accel_y: ";
    Printer<double>::stream(s, indent + "  ", v.accel_y);
    s << indent << "accel_z: ";
    Printer<double>::stream(s, indent + "  ", v.accel_z);
    s << indent << "wander: ";
    Printer<double>::stream(s, indent + "  ", v.wander);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "postprocess_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.postprocess_code);
    s << indent << "hardware_timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.hardware_timestamp);
    s << indent << "hardware_time_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hardware_time_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_FOLLOWER_MESSAGE_APPLANIXPOSE_H
