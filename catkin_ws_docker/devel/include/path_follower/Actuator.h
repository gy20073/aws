// Generated by gencpp from file path_follower/Actuator.msg
// DO NOT EDIT!


#ifndef PATH_FOLLOWER_MESSAGE_ACTUATOR_H
#define PATH_FOLLOWER_MESSAGE_ACTUATOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace path_follower
{
template <class ContainerAllocator>
struct Actuator_
{
  typedef Actuator_<ContainerAllocator> Type;

  Actuator_()
    : header()
    , direction(0)
    , steering_mode(0)
    , steering_value(0.0)
    , brake_pressure(0.0)
    , throttle_fraction(0.0)
    , timestamp(0.0)  {
    }
  Actuator_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , direction(0)
    , steering_mode(0)
    , steering_value(0.0)
    , brake_pressure(0.0)
    , throttle_fraction(0.0)
    , timestamp(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _direction_type;
  _direction_type direction;

   typedef uint8_t _steering_mode_type;
  _steering_mode_type steering_mode;

   typedef double _steering_value_type;
  _steering_value_type steering_value;

   typedef double _brake_pressure_type;
  _brake_pressure_type brake_pressure;

   typedef double _throttle_fraction_type;
  _throttle_fraction_type throttle_fraction;

   typedef double _timestamp_type;
  _timestamp_type timestamp;



  enum {
    DIRECTION_FORWARD = 0u,
    DIRECTION_REVERSE = 1u,
    ANGLE_CONTROL = 0u,
    TORQUE_CONTROL = 1u,
  };


  typedef boost::shared_ptr< ::path_follower::Actuator_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_follower::Actuator_<ContainerAllocator> const> ConstPtr;

}; // struct Actuator_

typedef ::path_follower::Actuator_<std::allocator<void> > Actuator;

typedef boost::shared_ptr< ::path_follower::Actuator > ActuatorPtr;
typedef boost::shared_ptr< ::path_follower::Actuator const> ActuatorConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_follower::Actuator_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_follower::Actuator_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_follower

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'path_follower': ['/data/yang/code/aws/catkin_ws_docker/src/path_follower/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_follower::Actuator_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_follower::Actuator_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_follower::Actuator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_follower::Actuator_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_follower::Actuator_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_follower::Actuator_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_follower::Actuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8164b580b4ff14b976d32e45c6c9f9d9";
  }

  static const char* value(const ::path_follower::Actuator_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8164b580b4ff14b9ULL;
  static const uint64_t static_value2 = 0x76d32e45c6c9f9d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_follower::Actuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_follower/Actuator";
  }

  static const char* value(const ::path_follower::Actuator_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_follower::Actuator_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint8 direction\n\
uint8 steering_mode\n\
float64 steering_value     # depending on steering_mode this is either angle or torque\n\
float64 brake_pressure\n\
float64 throttle_fraction\n\
float64 timestamp\n\
\n\
  # for direction\n\
uint8 DIRECTION_FORWARD = 0\n\
uint8 DIRECTION_REVERSE = 1\n\
\n\
  # for steering mode\n\
uint8 ANGLE_CONTROL = 0\n\
uint8 TORQUE_CONTROL = 1\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::path_follower::Actuator_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_follower::Actuator_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.direction);
      stream.next(m.steering_mode);
      stream.next(m.steering_value);
      stream.next(m.brake_pressure);
      stream.next(m.throttle_fraction);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Actuator_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_follower::Actuator_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_follower::Actuator_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.direction);
    s << indent << "steering_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steering_mode);
    s << indent << "steering_value: ";
    Printer<double>::stream(s, indent + "  ", v.steering_value);
    s << indent << "brake_pressure: ";
    Printer<double>::stream(s, indent + "  ", v.brake_pressure);
    s << indent << "throttle_fraction: ";
    Printer<double>::stream(s, indent + "  ", v.throttle_fraction);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_FOLLOWER_MESSAGE_ACTUATOR_H
