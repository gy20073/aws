// Generated by gencpp from file path_follower/state_Dynamic.msg
// DO NOT EDIT!


#ifndef PATH_FOLLOWER_MESSAGE_STATE_DYNAMIC_H
#define PATH_FOLLOWER_MESSAGE_STATE_DYNAMIC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_follower
{
template <class ContainerAllocator>
struct state_Dynamic_
{
  typedef state_Dynamic_<ContainerAllocator> Type;

  state_Dynamic_()
    : vx(0.0)
    , vy(0.0)
    , X(0.0)
    , Y(0.0)
    , psi(0.0)
    , wz(0.0)  {
    }
  state_Dynamic_(const ContainerAllocator& _alloc)
    : vx(0.0)
    , vy(0.0)
    , X(0.0)
    , Y(0.0)
    , psi(0.0)
    , wz(0.0)  {
  (void)_alloc;
    }



   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef double _X_type;
  _X_type X;

   typedef double _Y_type;
  _Y_type Y;

   typedef float _psi_type;
  _psi_type psi;

   typedef float _wz_type;
  _wz_type wz;





  typedef boost::shared_ptr< ::path_follower::state_Dynamic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_follower::state_Dynamic_<ContainerAllocator> const> ConstPtr;

}; // struct state_Dynamic_

typedef ::path_follower::state_Dynamic_<std::allocator<void> > state_Dynamic;

typedef boost::shared_ptr< ::path_follower::state_Dynamic > state_DynamicPtr;
typedef boost::shared_ptr< ::path_follower::state_Dynamic const> state_DynamicConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_follower::state_Dynamic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_follower::state_Dynamic_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_follower

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'path_follower': ['/data/yang/code/aws/catkin_ws_docker/src/path_follower/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_follower::state_Dynamic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_follower::state_Dynamic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_follower::state_Dynamic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_follower::state_Dynamic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_follower::state_Dynamic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_follower::state_Dynamic_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_follower::state_Dynamic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02fc3873b6977b7d73d21690b9600a53";
  }

  static const char* value(const ::path_follower::state_Dynamic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02fc3873b6977b7dULL;
  static const uint64_t static_value2 = 0x73d21690b9600a53ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_follower::state_Dynamic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_follower/state_Dynamic";
  }

  static const char* value(const ::path_follower::state_Dynamic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_follower::state_Dynamic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 vx      # m/s\n\
float32 vy      # m/s\n\
float64 X       # m\n\
float64 Y       # m\n\
float32 psi     # rad\n\
float32 wz      # rad/s\n\
\n\
";
  }

  static const char* value(const ::path_follower::state_Dynamic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_follower::state_Dynamic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.psi);
      stream.next(m.wz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct state_Dynamic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_follower::state_Dynamic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_follower::state_Dynamic_<ContainerAllocator>& v)
  {
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "X: ";
    Printer<double>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<double>::stream(s, indent + "  ", v.Y);
    s << indent << "psi: ";
    Printer<float>::stream(s, indent + "  ", v.psi);
    s << indent << "wz: ";
    Printer<float>::stream(s, indent + "  ", v.wz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_FOLLOWER_MESSAGE_STATE_DYNAMIC_H
