// Generated by gencpp from file path_follower/ControllerTarget.msg
// DO NOT EDIT!


#ifndef PATH_FOLLOWER_MESSAGE_CONTROLLERTARGET_H
#define PATH_FOLLOWER_MESSAGE_CONTROLLERTARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace path_follower
{
template <class ContainerAllocator>
struct ControllerTarget_
{
  typedef ControllerTarget_<ContainerAllocator> Type;

  ControllerTarget_()
    : header()
    , target_velocity(0.0)
    , target_steering_angle(0.0)
    , cross_track_error(0.0)
    , heading_error(0.0)
    , timestamp(0.0)  {
    }
  ControllerTarget_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , target_velocity(0.0)
    , target_steering_angle(0.0)
    , cross_track_error(0.0)
    , heading_error(0.0)
    , timestamp(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _target_velocity_type;
  _target_velocity_type target_velocity;

   typedef double _target_steering_angle_type;
  _target_steering_angle_type target_steering_angle;

   typedef double _cross_track_error_type;
  _cross_track_error_type cross_track_error;

   typedef double _heading_error_type;
  _heading_error_type heading_error;

   typedef double _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::path_follower::ControllerTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_follower::ControllerTarget_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerTarget_

typedef ::path_follower::ControllerTarget_<std::allocator<void> > ControllerTarget;

typedef boost::shared_ptr< ::path_follower::ControllerTarget > ControllerTargetPtr;
typedef boost::shared_ptr< ::path_follower::ControllerTarget const> ControllerTargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_follower::ControllerTarget_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_follower::ControllerTarget_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_follower

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'path_follower': ['/data/yang/code/aws/catkin_ws_docker/src/path_follower/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_follower::ControllerTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_follower::ControllerTarget_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_follower::ControllerTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_follower::ControllerTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_follower::ControllerTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_follower::ControllerTarget_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_follower::ControllerTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "775bd3cf3d1e910e04e7d60f982bcda1";
  }

  static const char* value(const ::path_follower::ControllerTarget_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x775bd3cf3d1e910eULL;
  static const uint64_t static_value2 = 0x04e7d60f982bcda1ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_follower::ControllerTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_follower/ControllerTarget";
  }

  static const char* value(const ::path_follower::ControllerTarget_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_follower::ControllerTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 target_velocity           # target velocity, in m/s\n\
float64 target_steering_angle     # target steering angle, in degrees\n\
float64 cross_track_error         # perpendicular distance to intended trajectory, in meters\n\
float64 heading_error             # heading error, in degrees\n\
float64 timestamp \n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::path_follower::ControllerTarget_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_follower::ControllerTarget_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.target_velocity);
      stream.next(m.target_steering_angle);
      stream.next(m.cross_track_error);
      stream.next(m.heading_error);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerTarget_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_follower::ControllerTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_follower::ControllerTarget_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "target_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.target_velocity);
    s << indent << "target_steering_angle: ";
    Printer<double>::stream(s, indent + "  ", v.target_steering_angle);
    s << indent << "cross_track_error: ";
    Printer<double>::stream(s, indent + "  ", v.cross_track_error);
    s << indent << "heading_error: ";
    Printer<double>::stream(s, indent + "  ", v.heading_error);
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_FOLLOWER_MESSAGE_CONTROLLERTARGET_H
