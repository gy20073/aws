#include "d3d11device.h"
#include "d3d11devicecontext.h"
#include "util.h"

D3D11DeviceHook::~D3D11DeviceHook() {
	if (d_)
		d_->Release();
}

template<typename D, typename C, int V> HRESULT upgrade(D3D11Device * d, REFIID riid, void **ppvObj) {
	if (riid == __uuidof(D) && d->version_ < V) {
		D *new_device = nullptr;
		C *new_context = nullptr;
		if (FAILED(d->d_->QueryInterface(&new_device)))
			return E_NOINTERFACE;
		d->d_->Release();
		d->d_ = new_device;
		d->version_ = V;
		d->immediate_context_->QueryInterface(IID_PPV_ARGS(&new_context));
		new_context->Release();
	}
	return S_OK;
}
void D3D11Device::updateHook() {
	h_->version_ = version_;
	if (h_->d_)
		h_->d_->Release();
	h_->d_ = d_;
	h_->d_->AddRef();
}

D3D11Device::~D3D11Device() {
	//if (immediate_context_)
		//immediate_context_->Release();
}

HRESULT STDMETHODCALLTYPE D3D11Device::QueryInterface(REFIID riid, void **ppvObj) {
	if (ppvObj == nullptr) {
		return E_POINTER;
	} else if ( riid == __uuidof(this) || riid == __uuidof(IUnknown) || riid == __uuidof(ID3D11Device) || riid == __uuidof(ID3D11Device1) || riid == __uuidof(ID3D11Device2) || riid == __uuidof(ID3D11Device3)) {
		HRESULT r = upgrade<ID3D11Device1, ID3D11DeviceContext1, 1>(this, riid, ppvObj);
		if (FAILED(r)) return r;
		r = upgrade<ID3D11Device2, ID3D11DeviceContext2, 2>(this, riid, ppvObj);
		if (FAILED(r)) return r;
		r = upgrade<ID3D11Device3, ID3D11DeviceContext3, 3>(this, riid, ppvObj);
		if (FAILED(r)) return r;
		updateHook();
		AddRef();

		*ppvObj = this;

		return S_OK;
	}
	return d_->QueryInterface(riid, ppvObj);
}
ULONG STDMETHODCALLTYPE D3D11Device::AddRef() {
	ref_++;
	immediate_context_->AddRef();
	return d_->AddRef();
}
ULONG STDMETHODCALLTYPE D3D11Device::Release() {
	ASSERT(immediate_context_ != nullptr);
	immediate_context_->Release();

	ULONG ref = d_->Release();
	if (--ref_ == 0 && ref != 0) {
		//LOG() << "Reference count for 'ID3D11Device" << (version_ > 0 ? std::to_string(version_) : "") << "' object " << this << " is inconsistent: " << ref << ", but expected 0.";
		ref = 0;
	}

	if (ref == 0) {
		ASSERT(ref_ <= 0);
		delete this;
	}

	return ref;
}
void STDMETHODCALLTYPE D3D11Device::GetImmediateContext(ID3D11DeviceContext **ppImmediateContext) {
	if (ppImmediateContext == nullptr) return;
	ASSERT(immediate_context_ != nullptr);
	immediate_context_->AddRef();
	*ppImmediateContext = immediate_context_;
}
void STDMETHODCALLTYPE D3D11Device::GetImmediateContext1(ID3D11DeviceContext1 **ppImmediateContext) {
	if (ppImmediateContext == nullptr) return;
	ASSERT(immediate_context_ != nullptr);
	ASSERT(immediate_context_->version_ >= 1);
	immediate_context_->AddRef();
	*ppImmediateContext = immediate_context_;
}
void STDMETHODCALLTYPE D3D11Device::GetImmediateContext2(ID3D11DeviceContext2 **ppImmediateContext) {
	if (ppImmediateContext == nullptr) return;
	ASSERT(immediate_context_ != nullptr);
	ASSERT(immediate_context_->version_ >= 2);
	immediate_context_->AddRef();
	*ppImmediateContext = immediate_context_;
}
void STDMETHODCALLTYPE D3D11Device::GetImmediateContext3(ID3D11DeviceContext3 **ppImmediateContext) {
	if (ppImmediateContext == nullptr) return;
	ASSERT(immediate_context_ != nullptr);
	ASSERT(immediate_context_->version_ >= 3);
	immediate_context_->AddRef();
	*ppImmediateContext = immediate_context_;
}

/**** Autogenerated hook source ****/
HRESULT D3D11DeviceHook::CreateBuffer(const D3D11_BUFFER_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Buffer **ppBuffer) {
	return d_->CreateBuffer(pDesc, pInitialData, ppBuffer);
}
HRESULT D3D11DeviceHook::CreateTexture1D(const D3D11_TEXTURE1D_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture1D **ppTexture1D) {
	return d_->CreateTexture1D(pDesc, pInitialData, ppTexture1D);
}
HRESULT D3D11DeviceHook::CreateTexture2D(const D3D11_TEXTURE2D_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture2D **ppTexture2D) {
	return d_->CreateTexture2D(pDesc, pInitialData, ppTexture2D);
}
HRESULT D3D11DeviceHook::CreateTexture3D(const D3D11_TEXTURE3D_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture3D **ppTexture3D) {
	return d_->CreateTexture3D(pDesc, pInitialData, ppTexture3D);
}
HRESULT D3D11DeviceHook::CreateShaderResourceView(ID3D11Resource *pResource, const D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc, ID3D11ShaderResourceView **ppSRView) {
	return d_->CreateShaderResourceView(pResource, pDesc, ppSRView);
}
HRESULT D3D11DeviceHook::CreateUnorderedAccessView(ID3D11Resource *pResource, const D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc, ID3D11UnorderedAccessView **ppUAView) {
	return d_->CreateUnorderedAccessView(pResource, pDesc, ppUAView);
}
HRESULT D3D11DeviceHook::CreateRenderTargetView(ID3D11Resource *pResource, const D3D11_RENDER_TARGET_VIEW_DESC *pDesc, ID3D11RenderTargetView **ppRTView) {
	return d_->CreateRenderTargetView(pResource, pDesc, ppRTView);
}
HRESULT D3D11DeviceHook::CreateDepthStencilView(ID3D11Resource *pResource, const D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc, ID3D11DepthStencilView **ppDepthStencilView) {
	return d_->CreateDepthStencilView(pResource, pDesc, ppDepthStencilView);
}
HRESULT D3D11DeviceHook::CreateInputLayout(const D3D11_INPUT_ELEMENT_DESC *pInputElementDescs, UINT NumElements, const void *pShaderBytecodeWithInputSignature, SIZE_T BytecodeLength, ID3D11InputLayout **ppInputLayout) {
	return d_->CreateInputLayout(pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
}
HRESULT D3D11DeviceHook::CreateVertexShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage *pClassLinkage, ID3D11VertexShader **ppVertexShader) {
	return d_->CreateVertexShader(pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShader);
}
HRESULT D3D11DeviceHook::CreateGeometryShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage *pClassLinkage, ID3D11GeometryShader **ppGeometryShader) {
	return d_->CreateGeometryShader(pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShader);
}
HRESULT D3D11DeviceHook::CreateGeometryShaderWithStreamOutput(const void *pShaderBytecode, SIZE_T BytecodeLength, const D3D11_SO_DECLARATION_ENTRY *pSODeclaration, UINT NumEntries, const UINT *pBufferStrides, UINT NumStrides, UINT RasterizedStream, ID3D11ClassLinkage *pClassLinkage, ID3D11GeometryShader **ppGeometryShader) {
	return d_->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
}
HRESULT D3D11DeviceHook::CreatePixelShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage *pClassLinkage, ID3D11PixelShader **ppPixelShader) {
	return d_->CreatePixelShader(pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShader);
}
HRESULT D3D11DeviceHook::CreateHullShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage *pClassLinkage, ID3D11HullShader **ppHullShader) {
	return d_->CreateHullShader(pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShader);
}
HRESULT D3D11DeviceHook::CreateDomainShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage *pClassLinkage, ID3D11DomainShader **ppDomainShader) {
	return d_->CreateDomainShader(pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShader);
}
HRESULT D3D11DeviceHook::CreateComputeShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage *pClassLinkage, ID3D11ComputeShader **ppComputeShader) {
	return d_->CreateComputeShader(pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShader);
}
HRESULT D3D11DeviceHook::CreateClassLinkage(ID3D11ClassLinkage **ppLinkage) {
	return d_->CreateClassLinkage(ppLinkage);
}
HRESULT D3D11DeviceHook::CreateBlendState(const D3D11_BLEND_DESC *pBlendStateDesc, ID3D11BlendState **ppBlendState) {
	return d_->CreateBlendState(pBlendStateDesc, ppBlendState);
}
HRESULT D3D11DeviceHook::CreateDepthStencilState(const D3D11_DEPTH_STENCIL_DESC *pDepthStencilDesc, ID3D11DepthStencilState **ppDepthStencilState) {
	return d_->CreateDepthStencilState(pDepthStencilDesc, ppDepthStencilState);
}
HRESULT D3D11DeviceHook::CreateRasterizerState(const D3D11_RASTERIZER_DESC *pRasterizerDesc, ID3D11RasterizerState **ppRasterizerState) {
	return d_->CreateRasterizerState(pRasterizerDesc, ppRasterizerState);
}
HRESULT D3D11DeviceHook::CreateSamplerState(const D3D11_SAMPLER_DESC *pSamplerDesc, ID3D11SamplerState **ppSamplerState) {
	return d_->CreateSamplerState(pSamplerDesc, ppSamplerState);
}
HRESULT D3D11DeviceHook::CreateQuery(const D3D11_QUERY_DESC *pQueryDesc, ID3D11Query **ppQuery) {
	return d_->CreateQuery(pQueryDesc, ppQuery);
}
HRESULT D3D11DeviceHook::CreatePredicate(const D3D11_QUERY_DESC *pPredicateDesc, ID3D11Predicate **ppPredicate) {
	return d_->CreatePredicate(pPredicateDesc, ppPredicate);
}
HRESULT D3D11DeviceHook::CreateCounter(const D3D11_COUNTER_DESC *pCounterDesc, ID3D11Counter **ppCounter) {
	return d_->CreateCounter(pCounterDesc, ppCounter);
}
HRESULT D3D11DeviceHook::CreateDeferredContext(UINT ContextFlags, ID3D11DeviceContext **ppDeferredContext) {
	return d_->CreateDeferredContext(ContextFlags, ppDeferredContext);
}
HRESULT D3D11DeviceHook::OpenSharedResource(HANDLE hResource, REFIID ReturnedInterface, void **ppResource) {
	return d_->OpenSharedResource(hResource, ReturnedInterface, ppResource);
}
HRESULT D3D11DeviceHook::CheckFormatSupport(DXGI_FORMAT Format, UINT *pFormatSupport) {
	return d_->CheckFormatSupport(Format, pFormatSupport);
}
HRESULT D3D11DeviceHook::CheckMultisampleQualityLevels(DXGI_FORMAT Format, UINT SampleCount, UINT *pNumQualityLevels) {
	return d_->CheckMultisampleQualityLevels(Format, SampleCount, pNumQualityLevels);
}
void D3D11DeviceHook::CheckCounterInfo(D3D11_COUNTER_INFO *pCounterInfo) {
	return d_->CheckCounterInfo(pCounterInfo);
}
HRESULT D3D11DeviceHook::CheckCounter(const D3D11_COUNTER_DESC *pDesc, D3D11_COUNTER_TYPE *pType, UINT *pActiveCounters, LPSTR szName, UINT *pNameLength, LPSTR szUnits, UINT *pUnitsLength, LPSTR szDescription, UINT *pDescriptionLength) {
	return d_->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
}
HRESULT D3D11DeviceHook::CheckFeatureSupport(D3D11_FEATURE Feature, void *pFeatureSupportData, UINT FeatureSupportDataSize) {
	return d_->CheckFeatureSupport(Feature, pFeatureSupportData, FeatureSupportDataSize);
}
HRESULT D3D11DeviceHook::GetPrivateData(REFGUID guid, UINT *pDataSize, void *pData) {
	return d_->GetPrivateData(guid, pDataSize, pData);
}
HRESULT D3D11DeviceHook::SetPrivateData(REFGUID guid, UINT DataSize, const void *pData) {
	return d_->SetPrivateData(guid, DataSize, pData);
}
HRESULT D3D11DeviceHook::SetPrivateDataInterface(REFGUID guid, const IUnknown *pData) {
	return d_->SetPrivateDataInterface(guid, pData);
}
UINT D3D11DeviceHook::GetCreationFlags() {
	return d_->GetCreationFlags();
}
HRESULT D3D11DeviceHook::GetDeviceRemovedReason() {
	return d_->GetDeviceRemovedReason();
}
HRESULT D3D11DeviceHook::SetExceptionMode(UINT RaiseFlags) {
	return d_->SetExceptionMode(RaiseFlags);
}
UINT D3D11DeviceHook::GetExceptionMode() {
	return d_->GetExceptionMode();
}
D3D_FEATURE_LEVEL D3D11DeviceHook::GetFeatureLevel() {
	return d_->GetFeatureLevel();
}
HRESULT D3D11DeviceHook::CreateDeferredContext1(UINT ContextFlags, ID3D11DeviceContext1 **ppDeferredContext) {
	ASSERT(version_ >= 1);
	return static_cast<ID3D11Device1 *>(d_)->CreateDeferredContext1(ContextFlags, ppDeferredContext);
}
HRESULT D3D11DeviceHook::CreateBlendState1(const D3D11_BLEND_DESC1 *pBlendStateDesc, ID3D11BlendState1 **ppBlendState) {
	ASSERT(version_ >= 1);
	return static_cast<ID3D11Device1 *>(d_)->CreateBlendState1(pBlendStateDesc, ppBlendState);
}
HRESULT D3D11DeviceHook::CreateRasterizerState1(const D3D11_RASTERIZER_DESC1 *pRasterizerDesc, ID3D11RasterizerState1 **ppRasterizerState) {
	ASSERT(version_ >= 1);
	return static_cast<ID3D11Device1 *>(d_)->CreateRasterizerState1(pRasterizerDesc, ppRasterizerState);
}
HRESULT D3D11DeviceHook::CreateDeviceContextState(UINT Flags, const D3D_FEATURE_LEVEL *pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, REFIID EmulatedInterface, D3D_FEATURE_LEVEL *pChosenFeatureLevel, ID3DDeviceContextState **ppContextState) {
	ASSERT(version_ >= 1);
	return static_cast<ID3D11Device1 *>(d_)->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState);
}
HRESULT D3D11DeviceHook::OpenSharedResource1(HANDLE hResource, REFIID returnedInterface, void **ppResource) {
	ASSERT(version_ >= 1);
	return static_cast<ID3D11Device1 *>(d_)->OpenSharedResource1(hResource, returnedInterface, ppResource);
}
HRESULT D3D11DeviceHook::OpenSharedResourceByName(LPCWSTR lpName, DWORD dwDesiredAccess, REFIID returnedInterface, void **ppResource) {
	ASSERT(version_ >= 1);
	return static_cast<ID3D11Device1 *>(d_)->OpenSharedResourceByName(lpName, dwDesiredAccess, returnedInterface, ppResource);
}
HRESULT D3D11DeviceHook::CreateDeferredContext2(UINT ContextFlags, ID3D11DeviceContext2 **ppDeferredContext) {
	ASSERT(version_ >= 2);
	return static_cast<ID3D11Device2 *>(d_)->CreateDeferredContext2(ContextFlags, ppDeferredContext);
}
void D3D11DeviceHook::GetResourceTiling(ID3D11Resource *pTiledResource, UINT *pNumTilesForEntireResource, D3D11_PACKED_MIP_DESC *pPackedMipDesc, D3D11_TILE_SHAPE *pStandardTileShapeForNonPackedMips, UINT *pNumSubresourceTilings, UINT FirstSubresourceTilingToGet, D3D11_SUBRESOURCE_TILING *pSubresourceTilingsForNonPackedMips) {
	ASSERT(version_ >= 2);
	return static_cast<ID3D11Device2 *>(d_)->GetResourceTiling(pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
}
HRESULT D3D11DeviceHook::CheckMultisampleQualityLevels1(DXGI_FORMAT Format, UINT SampleCount, UINT Flags, UINT *pNumQualityLevels) {
	ASSERT(version_ >= 2);
	return static_cast<ID3D11Device2 *>(d_)->CheckMultisampleQualityLevels1(Format, SampleCount, Flags, pNumQualityLevels);
}
HRESULT D3D11DeviceHook::CreateTexture2D1(const D3D11_TEXTURE2D_DESC1 *pDesc1, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture2D1 **ppTexture2D) {
	ASSERT(version_ >= 3);
	return static_cast<ID3D11Device3 *>(d_)->CreateTexture2D1(pDesc1, pInitialData, ppTexture2D);
}
HRESULT D3D11DeviceHook::CreateTexture3D1(const D3D11_TEXTURE3D_DESC1 *pDesc1, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture3D1 **ppTexture3D) {
	ASSERT(version_ >= 3);
	return static_cast<ID3D11Device3 *>(d_)->CreateTexture3D1(pDesc1, pInitialData, ppTexture3D);
}
HRESULT D3D11DeviceHook::CreateRasterizerState2(const D3D11_RASTERIZER_DESC2 *pRasterizerDesc, ID3D11RasterizerState2 **ppRasterizerState) {
	ASSERT(version_ >= 3);
	return static_cast<ID3D11Device3 *>(d_)->CreateRasterizerState2(pRasterizerDesc, ppRasterizerState);
}
HRESULT D3D11DeviceHook::CreateShaderResourceView1(ID3D11Resource *pResource, const D3D11_SHADER_RESOURCE_VIEW_DESC1 *pDesc1, ID3D11ShaderResourceView1 **ppSRView1) {
	ASSERT(version_ >= 3);
	return static_cast<ID3D11Device3 *>(d_)->CreateShaderResourceView1(pResource, pDesc1, ppSRView1);
}
HRESULT D3D11DeviceHook::CreateUnorderedAccessView1(ID3D11Resource *pResource, const D3D11_UNORDERED_ACCESS_VIEW_DESC1 *pDesc1, ID3D11UnorderedAccessView1 **ppUAView1) {
	ASSERT(version_ >= 3);
	return static_cast<ID3D11Device3 *>(d_)->CreateUnorderedAccessView1(pResource, pDesc1, ppUAView1);
}
HRESULT D3D11DeviceHook::CreateRenderTargetView1(ID3D11Resource *pResource, const D3D11_RENDER_TARGET_VIEW_DESC1 *pDesc1, ID3D11RenderTargetView1 **ppRTView1) {
	ASSERT(version_ >= 3);
	return static_cast<ID3D11Device3 *>(d_)->CreateRenderTargetView1(pResource, pDesc1, ppRTView1);
}
HRESULT D3D11DeviceHook::CreateQuery1(const D3D11_QUERY_DESC1 *pQueryDesc1, ID3D11Query1 **ppQuery1) {
	ASSERT(version_ >= 3);
	return static_cast<ID3D11Device3 *>(d_)->CreateQuery1(pQueryDesc1, ppQuery1);
}
HRESULT D3D11DeviceHook::CreateDeferredContext3(UINT ContextFlags, ID3D11DeviceContext3 **ppDeferredContext) {
	ASSERT(version_ >= 3);
	return static_cast<ID3D11Device3 *>(d_)->CreateDeferredContext3(ContextFlags, ppDeferredContext);
}
void D3D11DeviceHook::WriteToSubresource(ID3D11Resource *pDstResource, UINT DstSubresource, const D3D11_BOX *pDstBox, const void *pSrcData, UINT SrcRowPitch, UINT SrcDepthPitch) {
	ASSERT(version_ >= 3);
	return static_cast<ID3D11Device3 *>(d_)->WriteToSubresource(pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
}
void D3D11DeviceHook::ReadFromSubresource(void *pDstData, UINT DstRowPitch, UINT DstDepthPitch, ID3D11Resource *pSrcResource, UINT SrcSubresource, const D3D11_BOX *pSrcBox) {
	ASSERT(version_ >= 3);
	return static_cast<ID3D11Device3 *>(d_)->ReadFromSubresource(pDstData, DstRowPitch, DstDepthPitch, pSrcResource, SrcSubresource, pSrcBox);
}
/**** End autogenerated hook source ****/

/**** Autogenerated source ****/
HRESULT STDMETHODCALLTYPE D3D11Device::CreateBuffer(const D3D11_BUFFER_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Buffer **ppBuffer) {
	return h_->CreateBuffer(pDesc, pInitialData, ppBuffer);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateTexture1D(const D3D11_TEXTURE1D_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture1D **ppTexture1D) {
	return h_->CreateTexture1D(pDesc, pInitialData, ppTexture1D);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateTexture2D(const D3D11_TEXTURE2D_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture2D **ppTexture2D) {
	return h_->CreateTexture2D(pDesc, pInitialData, ppTexture2D);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateTexture3D(const D3D11_TEXTURE3D_DESC *pDesc, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture3D **ppTexture3D) {
	return h_->CreateTexture3D(pDesc, pInitialData, ppTexture3D);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateShaderResourceView(ID3D11Resource *pResource, const D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc, ID3D11ShaderResourceView **ppSRView) {
	return h_->CreateShaderResourceView(pResource, pDesc, ppSRView);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateUnorderedAccessView(ID3D11Resource *pResource, const D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc, ID3D11UnorderedAccessView **ppUAView) {
	return h_->CreateUnorderedAccessView(pResource, pDesc, ppUAView);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateRenderTargetView(ID3D11Resource *pResource, const D3D11_RENDER_TARGET_VIEW_DESC *pDesc, ID3D11RenderTargetView **ppRTView) {
	return h_->CreateRenderTargetView(pResource, pDesc, ppRTView);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateDepthStencilView(ID3D11Resource *pResource, const D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc, ID3D11DepthStencilView **ppDepthStencilView) {
	return h_->CreateDepthStencilView(pResource, pDesc, ppDepthStencilView);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateInputLayout(const D3D11_INPUT_ELEMENT_DESC *pInputElementDescs, UINT NumElements, const void *pShaderBytecodeWithInputSignature, SIZE_T BytecodeLength, ID3D11InputLayout **ppInputLayout) {
	return h_->CreateInputLayout(pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateVertexShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage *pClassLinkage, ID3D11VertexShader **ppVertexShader) {
	return h_->CreateVertexShader(pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShader);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateGeometryShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage *pClassLinkage, ID3D11GeometryShader **ppGeometryShader) {
	return h_->CreateGeometryShader(pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShader);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateGeometryShaderWithStreamOutput(const void *pShaderBytecode, SIZE_T BytecodeLength, const D3D11_SO_DECLARATION_ENTRY *pSODeclaration, UINT NumEntries, const UINT *pBufferStrides, UINT NumStrides, UINT RasterizedStream, ID3D11ClassLinkage *pClassLinkage, ID3D11GeometryShader **ppGeometryShader) {
	return h_->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreatePixelShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage *pClassLinkage, ID3D11PixelShader **ppPixelShader) {
	return h_->CreatePixelShader(pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShader);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateHullShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage *pClassLinkage, ID3D11HullShader **ppHullShader) {
	return h_->CreateHullShader(pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShader);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateDomainShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage *pClassLinkage, ID3D11DomainShader **ppDomainShader) {
	return h_->CreateDomainShader(pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShader);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateComputeShader(const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage *pClassLinkage, ID3D11ComputeShader **ppComputeShader) {
	return h_->CreateComputeShader(pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShader);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateClassLinkage(ID3D11ClassLinkage **ppLinkage) {
	return h_->CreateClassLinkage(ppLinkage);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateBlendState(const D3D11_BLEND_DESC *pBlendStateDesc, ID3D11BlendState **ppBlendState) {
	return h_->CreateBlendState(pBlendStateDesc, ppBlendState);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateDepthStencilState(const D3D11_DEPTH_STENCIL_DESC *pDepthStencilDesc, ID3D11DepthStencilState **ppDepthStencilState) {
	return h_->CreateDepthStencilState(pDepthStencilDesc, ppDepthStencilState);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateRasterizerState(const D3D11_RASTERIZER_DESC *pRasterizerDesc, ID3D11RasterizerState **ppRasterizerState) {
	return h_->CreateRasterizerState(pRasterizerDesc, ppRasterizerState);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateSamplerState(const D3D11_SAMPLER_DESC *pSamplerDesc, ID3D11SamplerState **ppSamplerState) {
	return h_->CreateSamplerState(pSamplerDesc, ppSamplerState);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateQuery(const D3D11_QUERY_DESC *pQueryDesc, ID3D11Query **ppQuery) {
	return h_->CreateQuery(pQueryDesc, ppQuery);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreatePredicate(const D3D11_QUERY_DESC *pPredicateDesc, ID3D11Predicate **ppPredicate) {
	return h_->CreatePredicate(pPredicateDesc, ppPredicate);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateCounter(const D3D11_COUNTER_DESC *pCounterDesc, ID3D11Counter **ppCounter) {
	return h_->CreateCounter(pCounterDesc, ppCounter);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateDeferredContext(UINT ContextFlags, ID3D11DeviceContext **ppDeferredContext) {
	return h_->CreateDeferredContext(ContextFlags, ppDeferredContext);
}
HRESULT STDMETHODCALLTYPE D3D11Device::OpenSharedResource(HANDLE hResource, REFIID ReturnedInterface, void **ppResource) {
	return h_->OpenSharedResource(hResource, ReturnedInterface, ppResource);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CheckFormatSupport(DXGI_FORMAT Format, UINT *pFormatSupport) {
	return h_->CheckFormatSupport(Format, pFormatSupport);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CheckMultisampleQualityLevels(DXGI_FORMAT Format, UINT SampleCount, UINT *pNumQualityLevels) {
	return h_->CheckMultisampleQualityLevels(Format, SampleCount, pNumQualityLevels);
}
void STDMETHODCALLTYPE D3D11Device::CheckCounterInfo(D3D11_COUNTER_INFO *pCounterInfo) {
	return h_->CheckCounterInfo(pCounterInfo);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CheckCounter(const D3D11_COUNTER_DESC *pDesc, D3D11_COUNTER_TYPE *pType, UINT *pActiveCounters, LPSTR szName, UINT *pNameLength, LPSTR szUnits, UINT *pUnitsLength, LPSTR szDescription, UINT *pDescriptionLength) {
	return h_->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CheckFeatureSupport(D3D11_FEATURE Feature, void *pFeatureSupportData, UINT FeatureSupportDataSize) {
	return h_->CheckFeatureSupport(Feature, pFeatureSupportData, FeatureSupportDataSize);
}
HRESULT STDMETHODCALLTYPE D3D11Device::GetPrivateData(REFGUID guid, UINT *pDataSize, void *pData) {
	return h_->GetPrivateData(guid, pDataSize, pData);
}
HRESULT STDMETHODCALLTYPE D3D11Device::SetPrivateData(REFGUID guid, UINT DataSize, const void *pData) {
	return h_->SetPrivateData(guid, DataSize, pData);
}
HRESULT STDMETHODCALLTYPE D3D11Device::SetPrivateDataInterface(REFGUID guid, const IUnknown *pData) {
	return h_->SetPrivateDataInterface(guid, pData);
}
UINT STDMETHODCALLTYPE D3D11Device::GetCreationFlags() {
	return h_->GetCreationFlags();
}
HRESULT STDMETHODCALLTYPE D3D11Device::GetDeviceRemovedReason() {
	return h_->GetDeviceRemovedReason();
}
HRESULT STDMETHODCALLTYPE D3D11Device::SetExceptionMode(UINT RaiseFlags) {
	return h_->SetExceptionMode(RaiseFlags);
}
UINT STDMETHODCALLTYPE D3D11Device::GetExceptionMode() {
	return h_->GetExceptionMode();
}
D3D_FEATURE_LEVEL STDMETHODCALLTYPE D3D11Device::GetFeatureLevel() {
	return h_->GetFeatureLevel();
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateDeferredContext1(UINT ContextFlags, ID3D11DeviceContext1 **ppDeferredContext) {
	return h_->CreateDeferredContext1(ContextFlags, ppDeferredContext);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateBlendState1(const D3D11_BLEND_DESC1 *pBlendStateDesc, ID3D11BlendState1 **ppBlendState) {
	return h_->CreateBlendState1(pBlendStateDesc, ppBlendState);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateRasterizerState1(const D3D11_RASTERIZER_DESC1 *pRasterizerDesc, ID3D11RasterizerState1 **ppRasterizerState) {
	return h_->CreateRasterizerState1(pRasterizerDesc, ppRasterizerState);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateDeviceContextState(UINT Flags, const D3D_FEATURE_LEVEL *pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, REFIID EmulatedInterface, D3D_FEATURE_LEVEL *pChosenFeatureLevel, ID3DDeviceContextState **ppContextState) {
	return h_->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState);
}
HRESULT STDMETHODCALLTYPE D3D11Device::OpenSharedResource1(HANDLE hResource, REFIID returnedInterface, void **ppResource) {
	return h_->OpenSharedResource1(hResource, returnedInterface, ppResource);
}
HRESULT STDMETHODCALLTYPE D3D11Device::OpenSharedResourceByName(LPCWSTR lpName, DWORD dwDesiredAccess, REFIID returnedInterface, void **ppResource) {
	return h_->OpenSharedResourceByName(lpName, dwDesiredAccess, returnedInterface, ppResource);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateDeferredContext2(UINT ContextFlags, ID3D11DeviceContext2 **ppDeferredContext) {
	return h_->CreateDeferredContext2(ContextFlags, ppDeferredContext);
}
void STDMETHODCALLTYPE D3D11Device::GetResourceTiling(ID3D11Resource *pTiledResource, UINT *pNumTilesForEntireResource, D3D11_PACKED_MIP_DESC *pPackedMipDesc, D3D11_TILE_SHAPE *pStandardTileShapeForNonPackedMips, UINT *pNumSubresourceTilings, UINT FirstSubresourceTilingToGet, D3D11_SUBRESOURCE_TILING *pSubresourceTilingsForNonPackedMips) {
	return h_->GetResourceTiling(pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CheckMultisampleQualityLevels1(DXGI_FORMAT Format, UINT SampleCount, UINT Flags, UINT *pNumQualityLevels) {
	return h_->CheckMultisampleQualityLevels1(Format, SampleCount, Flags, pNumQualityLevels);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateTexture2D1(const D3D11_TEXTURE2D_DESC1 *pDesc1, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture2D1 **ppTexture2D) {
	return h_->CreateTexture2D1(pDesc1, pInitialData, ppTexture2D);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateTexture3D1(const D3D11_TEXTURE3D_DESC1 *pDesc1, const D3D11_SUBRESOURCE_DATA *pInitialData, ID3D11Texture3D1 **ppTexture3D) {
	return h_->CreateTexture3D1(pDesc1, pInitialData, ppTexture3D);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateRasterizerState2(const D3D11_RASTERIZER_DESC2 *pRasterizerDesc, ID3D11RasterizerState2 **ppRasterizerState) {
	return h_->CreateRasterizerState2(pRasterizerDesc, ppRasterizerState);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateShaderResourceView1(ID3D11Resource *pResource, const D3D11_SHADER_RESOURCE_VIEW_DESC1 *pDesc1, ID3D11ShaderResourceView1 **ppSRView1) {
	return h_->CreateShaderResourceView1(pResource, pDesc1, ppSRView1);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateUnorderedAccessView1(ID3D11Resource *pResource, const D3D11_UNORDERED_ACCESS_VIEW_DESC1 *pDesc1, ID3D11UnorderedAccessView1 **ppUAView1) {
	return h_->CreateUnorderedAccessView1(pResource, pDesc1, ppUAView1);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateRenderTargetView1(ID3D11Resource *pResource, const D3D11_RENDER_TARGET_VIEW_DESC1 *pDesc1, ID3D11RenderTargetView1 **ppRTView1) {
	return h_->CreateRenderTargetView1(pResource, pDesc1, ppRTView1);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateQuery1(const D3D11_QUERY_DESC1 *pQueryDesc1, ID3D11Query1 **ppQuery1) {
	return h_->CreateQuery1(pQueryDesc1, ppQuery1);
}
HRESULT STDMETHODCALLTYPE D3D11Device::CreateDeferredContext3(UINT ContextFlags, ID3D11DeviceContext3 **ppDeferredContext) {
	return h_->CreateDeferredContext3(ContextFlags, ppDeferredContext);
}
void STDMETHODCALLTYPE D3D11Device::WriteToSubresource(ID3D11Resource *pDstResource, UINT DstSubresource, const D3D11_BOX *pDstBox, const void *pSrcData, UINT SrcRowPitch, UINT SrcDepthPitch) {
	return h_->WriteToSubresource(pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
}
void STDMETHODCALLTYPE D3D11Device::ReadFromSubresource(void *pDstData, UINT DstRowPitch, UINT DstDepthPitch, ID3D11Resource *pSrcResource, UINT SrcSubresource, const D3D11_BOX *pSrcBox) {
	return h_->ReadFromSubresource(pDstData, DstRowPitch, DstDepthPitch, pSrcResource, SrcSubresource, pSrcBox);
}
/**** End autogenerated source ****/
